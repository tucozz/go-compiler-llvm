#!/bin/bash

# Script para testar an√°lise sem√¢ntica em todos os arquivos invalid_tests
# Autor: Gabriel
# Data: $(date)
#
# Uso:
#   ./test_semantic_invalid.sh                 # Testa todas as categorias
#   ./test_semantic_invalid.sh functions       # Testa apenas categoria 'functions'
#   make test_semantic_invalid_batch           # Via Makefile (todas as categorias)
#
# Categorias dispon√≠veis:
#   arrays, declarations, expressions, functions, keywords, statements, syntax_errors

echo "==================================================================================="
echo "                SCRIPT DE TESTE DA AN√ÅLISE SEM√ÇNTICA - CASOS INV√ÅLIDOS"
echo "==================================================================================="
echo ""

# Contadores
TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0
NO_ERRORS=0

# Arrays para armazenar resultados
FAILED_FILES=()
NO_ERROR_FILES=()

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para compilar o projeto
compile_project() {
    echo -e "${BLUE}Compilando projeto...${NC}"
    make clean > /dev/null 2>&1
    make > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo -e "${RED}‚ùå Erro na compila√ß√£o do projeto!${NC}"
        exit 1
    fi
    echo -e "${GREEN}‚úÖ Projeto compilado com sucesso${NC}"
    echo ""
}

# Fun√ß√£o para testar um √∫nico arquivo
test_file() {
    local file=$1
    local category=$(dirname "$file" | sed 's/invalid_tests\///')
    local filename=$(basename "$file")
    
    echo -n "Testando $category/$filename... "
    
    # Executar o compilador e capturar output (usando vers√£o r√°pida)
    output=$(timeout 10s make run_compiler_fast FILE="$file" 2>&1)
    exit_code=$?
    
    # Verificar se houve timeout
    if [ $exit_code -eq 124 ]; then
        echo -e "${RED}TIMEOUT${NC}"
        FAILED_FILES+=("$file (timeout)")
        return 1
    fi
    
    # Para arquivos inv√°lidos, esperamos erros sint√°ticos OU sem√¢nticos
    if echo "$output" | grep -q "‚ùå Erros sint√°ticos encontrados!"; then
        echo -e "${GREEN}PASSOU${NC} (erro sint√°tico detectado como esperado)"
        return 0
    elif echo "$output" | grep -q "SEMANTIC ERROR"; then
        echo -e "${GREEN}PASSOU${NC} (erro sem√¢ntico detectado como esperado)"
        return 0
    elif echo "$output" | grep -q "‚úÖ An√°lise conclu√≠da!" && ! echo "$output" | grep -q "‚ùå Erros sint√°ticos encontrados!"; then
        echo -e "${RED}FALHA${NC} (deveria ter erro sint√°tico ou sem√¢ntico!)"
        NO_ERROR_FILES+=("$file")
        return 2
    elif [ $exit_code -ne 0 ]; then
        # Se houve erro de compila√ß√£o/parsing, tamb√©m consideramos correto
        echo -e "${GREEN}PASSOU${NC} (erro de compila√ß√£o detectado)"
        return 0
    else
        echo -e "${RED}FALHA${NC} (an√°lise n√£o detectou problemas)"
        NO_ERROR_FILES+=("$file")
        return 2
    fi
}

# Fun√ß√£o para testar uma categoria
test_category() {
    local category=$1
    echo -e "${BLUE}=== Testando categoria: $category ===${NC}"
    
    local category_passed=0
    local category_total=0
    
    # Encontrar todos os arquivos .go na categoria
    for file in invalid_tests/$category/*.go; do
        if [ -f "$file" ]; then
            ((TOTAL_TESTS++))
            ((category_total++))
            
            test_file "$file"
            result=$?
            
            if [ $result -eq 0 ]; then
                ((PASSED_TESTS++))
                ((category_passed++))
            elif [ $result -eq 2 ]; then
                ((NO_ERRORS++))
            else
                ((FAILED_TESTS++))
            fi
        fi
    done
    
    if [ $category_total -gt 0 ]; then
        local success_rate=$((category_passed * 100 / category_total))
        echo -e "${BLUE}Categoria $category: $category_passed/$category_total detectaram erros corretamente (${success_rate}%)${NC}"
    else
        echo -e "${YELLOW}Nenhum arquivo encontrado em $category${NC}"
    fi
    echo ""
}

# Fun√ß√£o para mostrar relat√≥rio final
show_summary() {
    echo ""
    echo "==================================================================================="
    echo "                              RELAT√ìRIO FINAL"
    echo "==================================================================================="
    echo ""
    
    # Estat√≠sticas gerais
    if [ $TOTAL_TESTS -gt 0 ]; then
        local success_rate=$((PASSED_TESTS * 100 / TOTAL_TESTS))
        local no_error_rate=$((NO_ERRORS * 100 / TOTAL_TESTS))
        local failure_rate=$((FAILED_TESTS * 100 / TOTAL_TESTS))
        
        echo -e "${GREEN}‚úÖ Testes que passaram (detectaram erros): $PASSED_TESTS/$TOTAL_TESTS (${success_rate}%)${NC}"
        echo -e "${RED}‚ùå Arquivos que N√ÉO detectaram erros: $NO_ERRORS/$TOTAL_TESTS (${no_error_rate}%)${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  Falhas de execu√ß√£o: $FAILED_TESTS/$TOTAL_TESTS (${failure_rate}%)${NC}"
        echo ""
    fi
    
    # Listar arquivos com problemas
    if [ ${#FAILED_FILES[@]} -gt 0 ]; then
        echo -e "${YELLOW}Arquivos com falhas de execu√ß√£o:${NC}"
        for file in "${FAILED_FILES[@]}"; do
            echo "  - $file"
        done
        echo ""
    fi
    
    if [ ${#NO_ERROR_FILES[@]} -gt 0 ]; then
        echo -e "${RED}Arquivos que deveriam ter erros mas passaram:${NC}"
        for file in "${NO_ERROR_FILES[@]}"; do
            echo "  - $file"
        done
        echo ""
    fi
    
    # Conclus√£o
    if [ $NO_ERRORS -eq 0 ] && [ $FAILED_TESTS -eq 0 ]; then
        echo -e "${GREEN}üéâ Todos os arquivos inv√°lidos foram detectados corretamente!${NC}"
    elif [ $NO_ERRORS -eq 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Alguns testes falharam na execu√ß√£o, mas nenhum arquivo inv√°lido passou sem detectar erros.${NC}"
    else
        echo -e "${RED}‚ö†Ô∏è  Alguns arquivos inv√°lidos n√£o foram detectados como tal!${NC}"
        echo -e "${RED}    Isso indica que a an√°lise sem√¢ntica precisa ser melhorada.${NC}"
    fi
    
    echo ""
    echo "An√°lise conclu√≠da em $(date)"
}

# Fun√ß√£o principal
main() {
    local target_category="$1"
    
    if [ -n "$target_category" ]; then
        echo "Iniciando testes da an√°lise sem√¢ntica para categoria: $target_category"
    else
        echo "Iniciando testes da an√°lise sem√¢ntica para arquivos inv√°lidos..."
    fi
    echo "Total de arquivos encontrados: $(find invalid_tests -name "*.go" | wc -l)"
    echo ""
    
    # Compilar projeto
    compile_project
    
    # Testar cada categoria
    categories=("arrays" "declarations" "expressions" "functions" "keywords" "scopes" "statements" "syntax_errors")
    
    for category in "${categories[@]}"; do
        # Se uma categoria espec√≠fica foi solicitada, pular as outras
        if [ -n "$target_category" ] && [ "$category" != "$target_category" ]; then
            continue
        fi
        
        if [ -d "invalid_tests/$category" ]; then
            test_category "$category"
        fi
    done
    
    # Mostrar relat√≥rio final
    show_summary
}

# Verificar se estamos no diret√≥rio correto
if [ ! -d "invalid_tests" ]; then
    echo -e "${RED}‚ùå Diret√≥rio invalid_tests n√£o encontrado!${NC}"
    echo "Execute este script a partir do diret√≥rio raiz do projeto."
    exit 1
fi

# Executar fun√ß√£o principal
main "$1"
